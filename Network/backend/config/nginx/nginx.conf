
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
error_log  logs/error.log  info;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  debug;
#
#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream gate_cgi_backend {
        server 127.0.0.1:8088 weight=10;
        server 127.0.0.1:8089 weight=90;
        server 127.0.0.1:8090 down;
    }

    server {
        listen       80;
        server_name  119.23.49.157;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        #

        location ~ \.cgi$ {
            fastcgi_pass gate_cgi_backend;
            fastcgi_index gate.cgi;
            include fastcgi_params;
        }

        location / {
#root   web_dev/html;
            root   web_dev/;
            index  index.html index.htm;
        }

#error_page  404              /404.html;

# redirect server error pages to the static page /50x.html
#
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

# proxy the PHP scripts to Apache listening on 127.0.0.1:80
#
#location ~ \.php$ {
#    proxy_pass   http://127.0.0.1;
#}

# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#
#location ~ \.php$ {
#    root           html;
#    fastcgi_pass   127.0.0.1:9000;
#    fastcgi_index  index.php;
#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
#    include        fastcgi_params;
#}

# deny access to .htaccess files, if Apache's document root
# concurs with nginx's one
#
#location ~ /\.ht {
#    deny  all;
#}
    }

    # 以下为学习测试内容  
    # =================== Start ====================

    init_worker_by_lua_file conf/lua/timer_work.lua;

    # map，将{}中根据模式匹配出的不同的结果，赋值给agent
    map $http_user_agent $agent {
        ~curl curl;
        ~*chrome chrome;
        ~*Mozilla firefox;
    }
    server {
        listen 82;
        server_name  119.23.49.15;

        location ~ /global_var_test {
            echo "http_user_agent: $http_user_agent";
            echo "content_length: $content_length";
            echo "content_type: $content_type";
            echo "document_root: $document_root";
            echo "document_uri: $document_uri";
            echo "host: $host";
            echo "http_cookie: $http_cookie";
            echo "limit_rate: $limit_rate";
            echo "request_body_file: $request_body_file";
            echo "request_method: $request_method";
            echo "request_filename: $request_filename";
            echo "remote_addr: $remote_addr";
            echo "remote_port: $remote_port";
            echo "request_uri: $request_uri";
            echo "query_string: $query_string";
            echo "scheme: $scheme";
            echo "server_protocol: $server_protocol";
            echo "server_name: $server_name";
            echo "server_port: $server_port";
            echo "uri: $uri";
        }

    # 测试一下echo和变量 ----
        location ~ /main {
            # 以下模块属于 echo-nginx-module
            echo_location /bar;

            # default
            echo "agent: $agent";

            echo $host;
        }

        location ~ /bar {
            if (!-f lua/xx) {
                echo "No xx file!";
            }
            echo "bar";
        }
        
        location ~ /lua_rewrite {
            rewrite_by_lua 'ngx.redirect("http://baidu.com", 302)';
        }

        location ~ /lua_shared_data {
            content_by_lua_file conf/lua/shared.lua;
        }

        location ~ /lua_api_test(\d+)/(\d+) {
            set $a $1; 
            set $b $host;
            default_type "text/html";

            content_by_lua_file conf/lua/print_req.lua;

            echo_after_body "ngx.var.b $b";
        }

    }
    # =================== End ====================


    # redis connection Pool
    upstream redis_conn_pool {
        server 127.0.0.1:6379;
        keepalive 1024 ;
    }

    # Shared data init
    lua_shared_dict shared_data 1M;

    error_log  logs/lua_error.log  info;
    init_by_lua_file conf/lua/init.lua;
    lua_package_path "/usr/lib64/lua/5.1/?.lua;;";
    lua_package_cpath "/usr/lib64/lua/5.1/?.so;;";
   
    server {
        listen       81;
        server_name  119.23.49.157;

        access_log logs/lua_access.log;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        #

        # access_by_lua
        location ~ /login {
            
            access_by_lua_file conf/lua/access.lua;

            rewrite_by_lua_file conf/lua/handler.lua;
        }

        location ~ /new_user/(.*) {
            set $user $1;
            echo "Hello new user '$user'";
        }
        location ~ /old_user/(.*) {
            set $user $1;
            echo "Hello old user '$user'";
        }

        location ~ /get_user_info/(.*) {
            internal;
            set $user $1;
            set $cmd "hmget";
            set $key "User.${user}";
            set $field "info";
            content_by_lua_file conf/lua/query_redis.lua;
        }

        location ~ /get_user_level/(.*) {
            internal;
            set $user $1;
            set $cmd "hmget";
            set $key "User.${user}";
            set $field "level";
            content_by_lua_file conf/lua/query_redis.lua;
        }

        location ~ /redis {
            internal;

            if ($arg_cnt = 1) {
                redis2_query $arg_cmd;
            }
            if ($arg_cnt = 2) {
                redis2_query $arg_cmd $arg_key;
            }
            if ($arg_cnt = 3) {
                redis2_query $arg_cmd $arg_key $arg_field;
            }

            redis2_pass redis_conn_pool;
        }

# END ------------

    }

# HTTPS server
#
#server {
#    listen       443 ssl;
#    server_name  localhost;

#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;

#    ssl_session_cache    shared:SSL:1m;
#    ssl_session_timeout  5m;

#    ssl_ciphers  HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers  on;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}

}

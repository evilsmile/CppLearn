
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  debug;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream gate_cgi_backend {
        server 127.0.0.1:8088 weight=10;
        server 127.0.0.1:8089 weight=90;
        server 127.0.0.1:8090 down;
    }

    server {
        listen       80;
        server_name  119.23.49.157;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        #

        location ~ \.cgi$ {
            fastcgi_pass gate_cgi_backend;
            fastcgi_index gate.cgi;
            include fastcgi_params;
        }

        location / {
#root   web_dev/html;
            root   web_dev/;
            index  index.html index.htm;
        }

#error_page  404              /404.html;

# redirect server error pages to the static page /50x.html
#
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

# proxy the PHP scripts to Apache listening on 127.0.0.1:80
#
#location ~ \.php$ {
#    proxy_pass   http://127.0.0.1;
#}

# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#
#location ~ \.php$ {
#    root           html;
#    fastcgi_pass   127.0.0.1:9000;
#    fastcgi_index  index.php;
#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
#    include        fastcgi_params;
#}

# deny access to .htaccess files, if Apache's document root
# concurs with nginx's one
#
#location ~ /\.ht {
#    deny  all;
#}
    }


# 以下为学习测试内容  =======================================
    # Connection Pool
    upstream redis_conn_pool {
        server 127.0.0.1:6379;
        keepalive 1024 ;
    }
    server {
        listen       81;
        server_name  119.23.49.157;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        #

    # 测试一下echo和变量 ----
        set $tags "Non";
        location ~ /main {
            # 以下模块属于 echo-nginx-module

        echo $host;
            set $tags "main request";
            echo $tags;
            echo_location /foo;
            echo_location /bar;
        }
        location ~ /foo {
            set $tags "foo request";
            echo $tags;
        }
        location ~ /bar {
            set $tags "bar request";
            echo $tags;
        }
    # END -------------
    
    # 测试一下 nginx-lua 
        location ~ /lua_ver {
            content_by_lua '
                if jit then
                    ngx.say("LuaJit Version: [", jit.version, "]")
                else
                    ngx.say("Lua Version: [", _VERSION, "]")
                end
           ';

        }

        # set_by_lua
        location ~ /lua_calc {
            set_by_lua $res '
                    local a = tonumber(ngx.arg[1]);
                    local b = tonumber(ngx.arg[2]);
                    return  a + b;
                ' $arg_num1 $arg_num2 ;  
            echo $res;
        }

        # content_by_lua
        location ~ /lua_hello {
            content_by_lua "
                ngx.say('Hello ', ngx.var.arg_who)
            ";
        }

        # set_by_lua_file
        location ~ /lua_file {
            set_by_lua_file $res 'conf/lua/adder.lua' $arg_a $arg_b;
            echo $res;
        }

        # access_by_lua
        location ~ /lua_auth {
            access_by_lua '
                if ngx.var.arg_user == "ntes" then
                    return
                else
                    ngx.exit(ngx.HTTP_FORBIDEN);
                end
                '; 
            echo "Welcome ntes";
        }


        # subrequest
        location ~ /lua_call_subreq {
            content_by_lua "
                local res1, res2 = ngx.location.capture_multi({{'/lua_subreq1'}, {'/lua_subreq2'}}); 
                if res1.status == 200 then
                    ngx.print(res1.body);
                end

                if res2.status == 200 then
                    ngx.print(res2.body);
                end
            " ;
        }
        location ~ /lua_subreq1 {
            echo "lua_subreq1 .. ";
        }
        location ~ /lua_subreq2 {
            echo "lua_subreq2 .. ";
        }

        # nginx lua with redis
        location ~ /lua_redis {
            content_by_lua '
              local parser = require("redis.parser");
              local res = ngx.location.capture("/redis", { args = { key = ngx.var.arg_key }});
              if res.status == 200 then
                 reply = parser.parse_reply(res.body);
                 ngx.say(reply);
              end
            ';
        }
        location ~ /redis {
            internal;

            redis2_query get $arg_key;

            redis2_pass redis_conn_pool;
        }

# END ------------

    }

# HTTPS server
#
#server {
#    listen       443 ssl;
#    server_name  localhost;

#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;

#    ssl_session_cache    shared:SSL:1m;
#    ssl_session_timeout  5m;

#    ssl_ciphers  HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers  on;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}

}
